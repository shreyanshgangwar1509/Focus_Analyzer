# this file contains the yawn model that was trained .
# this model is used because it was not giving good results at the time of real testing using camera .

import matplotlib.pyplot as plt
import numpy as np
import cv2
import PIL
import random
import tensorflow as tf
import seaborn as sns
import pathlib
import os
import pandas as pd
from sklearn.model_selection import train_test_split
from tensorflow import keras
from tensorflow.keras import backend  as K
from tensorflow.keras import layers
from tensorflow.keras.models import Sequential
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.utils import to_categorical
from sklearn.metrics import confusion_matrix,classification_report


def face_for_yawn(direc="/kaggle/input/drowsiness-dataset/train", face_cas_path="/kaggle/input/prediction-images/haarcascade_frontalface_default.xml"):
    yaw_no = []
    IMG_SIZE = 145
    categories = ["yawn", "no_yawn"]
    for category in categories:
        path_link = os.path.join(direc, category)
        class_num1 = categories.index(category)
        print(class_num1)
        for image in os.listdir(path_link):
            image_array = cv2.imread(os.path.join(path_link, image), cv2.IMREAD_COLOR)
            face_cascade = cv2.CascadeClassifier(face_cas_path)
            faces = face_cascade.detectMultiScale(image_array, 1.3, 5)
            for (x, y, w, h) in faces:
                img = cv2.rectangle(image_array, (x, y), (x+w, y+h), (0, 255, 0), 2)
                roi_color = img[y:y+h, x:x+w]
                resized_array = cv2.resize(roi_color, (IMG_SIZE, IMG_SIZE))
                yaw_no.append([resized_array, class_num1])
    return yaw_no


yawn_no_yawn = face_for_yawn()


X = []
y = []
for feature, label in yawn_no_yawn:
    X.append(feature)
    y.append(label)
y = to_categorical(np.array(y), num_classes=2)


x_train,x_test,y_train,y_test = train_test_split(X,y,random_state=0)
print(len(x_train))


cnn = Sequential([
        # data_augment,
        layers.Conv2D(64, (3, 3), padding='same', activation='relu', input_shape=(145, 145, 3 )),
        layers.MaxPooling2D(),
        
        layers.Conv2D(32, (3, 3), padding='same', activation='relu'),
        layers.MaxPooling2D(),
        
        layers.Conv2D(16, (3, 3), padding='same', activation='relu'),
        layers.MaxPooling2D(),
        
        
        layers.Flatten(),
        layers.Dropout(0.15),
        layers.Dense(60, activation='relu'),
           
        
        layers.Dense(2, activation='softmax')  
    ])


cnn.compile(optimizer='adam',
                loss='categorical_crossentropy',
                metrics=['accuracy'])


cnn.save('yawn_modal.h5')


cnn.evaluate(x_test,y_test)